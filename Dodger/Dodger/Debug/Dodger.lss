
Dodger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000644  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010a  0080010a  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001152  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a88  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b3  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000035d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001191a  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ec  00000000  00000000  0001510e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000155fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003ff4  00000000  00000000  000156d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	99 c1       	rjmp	.+818    	; 0x36c <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	92 d1       	rcall	.+804    	; 0x3e8 <main>
  c4:	bd c2       	rjmp	.+1402   	; 0x640 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
	spi_slaveSelect(0); // Select display chip
	spi_write(i); // digit adress: (digit place)
	spi_write(5-i); // digit value: i (= digit place)
	spi_slaveDeSelect(0); // Deselect display chip
	}
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <spi_masterInit>:
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	bb 98       	cbi	0x17, 3	; 23
  f0:	c0 9a       	sbi	0x18, 0	; 24
  f2:	82 e5       	ldi	r24, 0x52	; 82
  f4:	8d b9       	out	0x0d, r24	; 13
  f6:	08 95       	ret

000000f8 <spi_write>:
  f8:	8f b9       	out	0x0f, r24	; 15
  fa:	77 9b       	sbis	0x0e, 7	; 14
  fc:	fe cf       	rjmp	.-4      	; 0xfa <spi_write+0x2>
  fe:	08 95       	ret

00000100 <spi_slaveSelect>:
 100:	98 b3       	in	r25, 0x18	; 24
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <spi_slaveSelect+0xc>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	8a 95       	dec	r24
 10e:	e2 f7       	brpl	.-8      	; 0x108 <spi_slaveSelect+0x8>
 110:	20 95       	com	r18
 112:	29 23       	and	r18, r25
 114:	28 bb       	out	0x18, r18	; 24
 116:	08 95       	ret

00000118 <spi_slaveDeSelect>:
 118:	98 b3       	in	r25, 0x18	; 24
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <spi_slaveDeSelect+0xc>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <spi_slaveDeSelect+0x8>
 128:	29 2b       	or	r18, r25
 12a:	28 bb       	out	0x18, r18	; 24
 12c:	08 95       	ret

0000012e <displayDriverInit>:
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	e7 df       	rcall	.-50     	; 0x100 <spi_slaveSelect>
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	e1 df       	rcall	.-62     	; 0xf8 <spi_write>
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	df df       	rcall	.-66     	; 0xf8 <spi_write>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	ed df       	rcall	.-38     	; 0x118 <spi_slaveDeSelect>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	df df       	rcall	.-66     	; 0x100 <spi_slaveSelect>
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	d9 df       	rcall	.-78     	; 0xf8 <spi_write>
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	d7 df       	rcall	.-82     	; 0xf8 <spi_write>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	e5 df       	rcall	.-54     	; 0x118 <spi_slaveDeSelect>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	d7 df       	rcall	.-82     	; 0x100 <spi_slaveSelect>
 152:	8b e0       	ldi	r24, 0x0B	; 11
 154:	d1 df       	rcall	.-94     	; 0xf8 <spi_write>
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	cf df       	rcall	.-98     	; 0xf8 <spi_write>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	dd df       	rcall	.-70     	; 0x118 <spi_slaveDeSelect>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	cf df       	rcall	.-98     	; 0x100 <spi_slaveSelect>
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	c9 df       	rcall	.-110    	; 0xf8 <spi_write>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	c7 df       	rcall	.-114    	; 0xf8 <spi_write>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	d5 cf       	rjmp	.-86     	; 0x118 <spi_slaveDeSelect>
 16e:	08 95       	ret

00000170 <clearDisplay>:
 170:	cf 93       	push	r28
 172:	c1 e0       	ldi	r28, 0x01	; 1
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	c4 df       	rcall	.-120    	; 0x100 <spi_slaveSelect>
 178:	8c 2f       	mov	r24, r28
 17a:	be df       	rcall	.-132    	; 0xf8 <spi_write>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	bc df       	rcall	.-136    	; 0xf8 <spi_write>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	ca df       	rcall	.-108    	; 0x118 <spi_slaveDeSelect>
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9f df       	rcall	.-194    	; 0xc8 <wait>
 18a:	cf 5f       	subi	r28, 0xFF	; 255
 18c:	c5 30       	cpi	r28, 0x05	; 5
 18e:	91 f7       	brne	.-28     	; 0x174 <clearDisplay+0x4>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <CalculateScore>:

void CalculateScore(int score){
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	9c 01       	movw	r18, r24
	if(score / 10 <  1){
 19e:	8a 30       	cpi	r24, 0x0A	; 10
 1a0:	91 05       	cpc	r25, r1
 1a2:	6c f4       	brge	.+26     	; 0x1be <CalculateScore+0x2a>
		scoreArray[0] = 0;
 1a4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1a8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 1ac:	11 82       	std	Z+1, r1	; 0x01
 1ae:	10 82       	st	Z, r1
		scoreArray[1] = 0;
 1b0:	13 82       	std	Z+3, r1	; 0x03
 1b2:	12 82       	std	Z+2, r1	; 0x02
		scoreArray[2] = 0;
 1b4:	15 82       	std	Z+5, r1	; 0x05
 1b6:	14 82       	std	Z+4, r1	; 0x04
		scoreArray[3] = score;
 1b8:	97 83       	std	Z+7, r25	; 0x07
 1ba:	86 83       	std	Z+6, r24	; 0x06
 1bc:	54 c0       	rjmp	.+168    	; 0x266 <CalculateScore+0xd2>
		}else if(score / 100 < 1){
 1be:	84 36       	cpi	r24, 0x64	; 100
 1c0:	91 05       	cpc	r25, r1
 1c2:	84 f4       	brge	.+32     	; 0x1e4 <CalculateScore+0x50>
		scoreArray[0] = 0;
 1c4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1c8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 1cc:	11 82       	std	Z+1, r1	; 0x01
 1ce:	10 82       	st	Z, r1
		scoreArray[1] = 0;
 1d0:	13 82       	std	Z+3, r1	; 0x03
 1d2:	12 82       	std	Z+2, r1	; 0x02
		scoreArray[2] = score / 10;
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	5a d1       	rcall	.+692    	; 0x48e <__divmodhi4>
 1da:	75 83       	std	Z+5, r23	; 0x05
 1dc:	64 83       	std	Z+4, r22	; 0x04
		scoreArray[3] = score % 10;
 1de:	97 83       	std	Z+7, r25	; 0x07
 1e0:	86 83       	std	Z+6, r24	; 0x06
 1e2:	41 c0       	rjmp	.+130    	; 0x266 <CalculateScore+0xd2>
		}else if(score / 1000 < 1){
 1e4:	28 3e       	cpi	r18, 0xE8	; 232
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	38 07       	cpc	r19, r24
 1ea:	e4 f4       	brge	.+56     	; 0x224 <CalculateScore+0x90>
		scoreArray[0] = 0;
 1ec:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1f0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 1f4:	11 82       	std	Z+1, r1	; 0x01
 1f6:	10 82       	st	Z, r1
		scoreArray[1] = score / 100;
 1f8:	04 e6       	ldi	r16, 0x64	; 100
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	c9 01       	movw	r24, r18
 1fe:	b8 01       	movw	r22, r16
 200:	46 d1       	rcall	.+652    	; 0x48e <__divmodhi4>
 202:	ec 01       	movw	r28, r24
 204:	73 83       	std	Z+3, r23	; 0x03
 206:	62 83       	std	Z+2, r22	; 0x02
		scoreArray[2] = (score % 100) % 100 / 10;
 208:	b8 01       	movw	r22, r16
 20a:	41 d1       	rcall	.+642    	; 0x48e <__divmodhi4>
 20c:	2a e0       	ldi	r18, 0x0A	; 10
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	b9 01       	movw	r22, r18
 212:	3d d1       	rcall	.+634    	; 0x48e <__divmodhi4>
 214:	75 83       	std	Z+5, r23	; 0x05
 216:	64 83       	std	Z+4, r22	; 0x04
		scoreArray[3] = (score % 100) % 10;
 218:	ce 01       	movw	r24, r28
 21a:	b9 01       	movw	r22, r18
 21c:	38 d1       	rcall	.+624    	; 0x48e <__divmodhi4>
 21e:	97 83       	std	Z+7, r25	; 0x07
 220:	86 83       	std	Z+6, r24	; 0x06
 222:	21 c0       	rjmp	.+66     	; 0x266 <CalculateScore+0xd2>
		}else{
		scoreArray[0] = score / 1000;
 224:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 228:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 22c:	c9 01       	movw	r24, r18
 22e:	68 ee       	ldi	r22, 0xE8	; 232
 230:	73 e0       	ldi	r23, 0x03	; 3
 232:	2d d1       	rcall	.+602    	; 0x48e <__divmodhi4>
 234:	71 83       	std	Z+1, r23	; 0x01
 236:	60 83       	st	Z, r22
		scoreArray[1] = (score % 1000) / 100;
 238:	c4 e6       	ldi	r28, 0x64	; 100
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	27 d1       	rcall	.+590    	; 0x48e <__divmodhi4>
 240:	73 83       	std	Z+3, r23	; 0x03
 242:	62 83       	std	Z+2, r22	; 0x02
		scoreArray[2] = (score % 100) % 100 / 10;
 244:	c9 01       	movw	r24, r18
 246:	be 01       	movw	r22, r28
 248:	22 d1       	rcall	.+580    	; 0x48e <__divmodhi4>
 24a:	8c 01       	movw	r16, r24
 24c:	be 01       	movw	r22, r28
 24e:	1f d1       	rcall	.+574    	; 0x48e <__divmodhi4>
 250:	2a e0       	ldi	r18, 0x0A	; 10
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	1b d1       	rcall	.+566    	; 0x48e <__divmodhi4>
 258:	75 83       	std	Z+5, r23	; 0x05
 25a:	64 83       	std	Z+4, r22	; 0x04
		scoreArray[3] = (score % 100) % 10;
 25c:	c8 01       	movw	r24, r16
 25e:	b9 01       	movw	r22, r18
 260:	16 d1       	rcall	.+556    	; 0x48e <__divmodhi4>
 262:	97 83       	std	Z+7, r25	; 0x07
 264:	86 83       	std	Z+6, r24	; 0x06
		}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <writeCustomDisplay>:



void writeCustomDisplay(){
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	06 e0       	ldi	r16, 0x06	; 6
 278:	10 e0       	ldi	r17, 0x00	; 0
	for (char i =1; i<=4; i++)
 27a:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_slaveSelect(0); // Select display chip
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	40 df       	rcall	.-384    	; 0x100 <spi_slaveSelect>
		spi_write(i); // digit adress: (digit place)
 280:	8c 2f       	mov	r24, r28
 282:	3a df       	rcall	.-396    	; 0xf8 <spi_write>
		spi_write(scoreArray[5 - (i+1)]); // digit value: i (= digit place)
 284:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 288:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 28c:	e0 0f       	add	r30, r16
 28e:	f1 1f       	adc	r31, r17
 290:	80 81       	ld	r24, Z
 292:	32 df       	rcall	.-412    	; 0xf8 <spi_write>
		spi_slaveDeSelect(0); // Deselect display chip
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	40 df       	rcall	.-384    	; 0x118 <spi_slaveDeSelect>
 298:	cf 5f       	subi	r28, 0xFF	; 255
 29a:	02 50       	subi	r16, 0x02	; 2
 29c:	11 09       	sbc	r17, r1
}



void writeCustomDisplay(){
	for (char i =1; i<=4; i++)
 29e:	c5 30       	cpi	r28, 0x05	; 5
 2a0:	69 f7       	brne	.-38     	; 0x27c <writeCustomDisplay+0xc>
		spi_write(i); // digit adress: (digit place)
		spi_write(scoreArray[5 - (i+1)]); // digit value: i (= digit place)
		spi_slaveDeSelect(0); // Deselect display chip

	}
	}	
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <TotalInit>:


void TotalInit(void){
	DDRB =0x01; // Set PB0 pin as output for display select
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	87 bb       	out	0x17, r24	; 23
	spi_masterInit(); // Initialize spi module
 2ae:	1d df       	rcall	.-454    	; 0xea <spi_masterInit>
	displayDriverInit(); // Initialize display chip	
 2b0:	3e df       	rcall	.-388    	; 0x12e <displayDriverInit>
	wait(1000);
 2b2:	88 ee       	ldi	r24, 0xE8	; 232
 2b4:	93 e0       	ldi	r25, 0x03	; 3
 2b6:	08 cf       	rjmp	.-496    	; 0xc8 <wait>
 2b8:	08 95       	ret

000002ba <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 2ba:	08 95       	ret

000002bc <update>:





void update (void){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
    
        //display
        int rnd = rand() % 5;
 2c0:	54 d1       	rcall	.+680    	; 0x56a <rand>
 2c2:	65 e0       	ldi	r22, 0x05	; 5
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	e3 d0       	rcall	.+454    	; 0x48e <__divmodhi4>
        if(rnd > 0)
 2c8:	18 16       	cp	r1, r24
 2ca:	19 06       	cpc	r1, r25
 2cc:	7c f4       	brge	.+30     	; 0x2ec <update+0x30>
        {
        
            //row[rand() % 4] |= 0x01;
			row[rand() % 4] |= 0x08;
 2ce:	4d d1       	rcall	.+666    	; 0x56a <rand>
 2d0:	83 70       	andi	r24, 0x03	; 3
 2d2:	90 78       	andi	r25, 0x80	; 128
 2d4:	99 23       	and	r25, r25
 2d6:	24 f4       	brge	.+8      	; 0x2e0 <update+0x24>
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	8c 6f       	ori	r24, 0xFC	; 252
 2dc:	9f 6f       	ori	r25, 0xFF	; 255
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	fc 01       	movw	r30, r24
 2e2:	e0 5f       	subi	r30, 0xF0	; 240
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 81       	ld	r24, Z
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	80 83       	st	Z, r24
        }
    
	
    
    score++;
 2ec:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <score>
 2f0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <score+0x1>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <score+0x1>
 2fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <score>
 2fe:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <lost>
 302:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <lost+0x1>
 306:	e0 e1       	ldi	r30, 0x10	; 16
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	a4 e0       	ldi	r26, 0x04	; 4
 30c:	b1 e0       	ldi	r27, 0x01	; 1
 30e:	45 e1       	ldi	r20, 0x15	; 21
 310:	51 e0       	ldi	r21, 0x01	; 1
    for(i=0;i<5;i++){
		row[i] &= 0b11111000;
        row[i] = row[i] << 1;

        if((row[i] & player[i])){
            lost=1;
 312:	d1 e0       	ldi	r29, 0x01	; 1
 314:	c0 e0       	ldi	r28, 0x00	; 0
	
    
    score++;
    int i;
    for(i=0;i<5;i++){
		row[i] &= 0b11111000;
 316:	80 81       	ld	r24, Z
 318:	88 7f       	andi	r24, 0xF8	; 248
        row[i] = row[i] << 1;
 31a:	88 0f       	add	r24, r24
 31c:	99 0b       	sbc	r25, r25
 31e:	80 83       	st	Z, r24

        if((row[i] & player[i])){
 320:	2d 91       	ld	r18, X+
 322:	32 2f       	mov	r19, r18
 324:	38 23       	and	r19, r24
 326:	19 f4       	brne	.+6      	; 0x32e <update+0x72>
            lost=1;
        }else{
            row[i] |= player[i];
 328:	82 2b       	or	r24, r18
 32a:	80 83       	st	Z, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <update+0x76>
    for(i=0;i<5;i++){
		row[i] &= 0b11111000;
        row[i] = row[i] << 1;

        if((row[i] & player[i])){
            lost=1;
 32e:	7d 2f       	mov	r23, r29
 330:	6c 2f       	mov	r22, r28
 332:	31 96       	adiw	r30, 0x01	; 1
    
	
    
    score++;
    int i;
    for(i=0;i<5;i++){
 334:	e4 17       	cp	r30, r20
 336:	f5 07       	cpc	r31, r21
 338:	71 f7       	brne	.-36     	; 0x316 <update+0x5a>
 33a:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <lost>
 33e:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <lost+0x1>
        }

    }


    PORTA = (row[0] |= 0b00000111);
 342:	e0 e1       	ldi	r30, 0x10	; 16
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	80 81       	ld	r24, Z
 348:	87 60       	ori	r24, 0x07	; 7
 34a:	80 83       	st	Z, r24
 34c:	8b bb       	out	0x1b, r24	; 27
    PORTB = (row[1] |= 0b00000111);
 34e:	81 81       	ldd	r24, Z+1	; 0x01
 350:	87 60       	ori	r24, 0x07	; 7
 352:	81 83       	std	Z+1, r24	; 0x01
 354:	88 bb       	out	0x18, r24	; 24
    PORTC = (row[2] |= 0b00000111);
 356:	82 81       	ldd	r24, Z+2	; 0x02
 358:	87 60       	ori	r24, 0x07	; 7
 35a:	82 83       	std	Z+2, r24	; 0x02
 35c:	85 bb       	out	0x15, r24	; 21
    PORTD = (row[3] |= 0b00000111);
 35e:	83 81       	ldd	r24, Z+3	; 0x03
 360:	87 60       	ori	r24, 0x07	; 7
 362:	83 83       	std	Z+3, r24	; 0x03
 364:	82 bb       	out	0x12, r24	; 18
                }
            }
        }*/

    //lcd_write_string("score: " + score);
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <__vector_14>:


ISR ( TIMER1_OVF_vect )
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	0b b6       	in	r0, 0x3b	; 59
 378:	0f 92       	push	r0
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
    TCNT1 = 100; // Herlaad de timer
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	9d bd       	out	0x2d, r25	; 45
 398:	8c bd       	out	0x2c, r24	; 44
    if(!lost)
 39a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lost>
 39e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lost+0x1>
 3a2:	89 2b       	or	r24, r25
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_14+0x3c>
    {
    update();
 3a6:	8a df       	rcall	.-236    	; 0x2bc <update>
    }
}
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	7f 91       	pop	r23
 3b6:	6f 91       	pop	r22
 3b8:	5f 91       	pop	r21
 3ba:	4f 91       	pop	r20
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0b be       	out	0x3b, r0	; 59
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <init_timer>:

void init_timer(){
    DDRE |= (1 << 0);
 3ce:	10 9a       	sbi	0x02, 0	; 2

    TIMSK |= (1 << TOIE1 ); 
 3d0:	87 b7       	in	r24, 0x37	; 55
 3d2:	84 60       	ori	r24, 0x04	; 4
 3d4:	87 bf       	out	0x37, r24	; 55
    sei () ; 
 3d6:	78 94       	sei
    
    TCNT1 = 100; 
 3d8:	84 e6       	ldi	r24, 0x64	; 100
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	9d bd       	out	0x2d, r25	; 45
 3de:	8c bd       	out	0x2c, r24	; 44
    TCCR1B |= ((1 << CS10 ) | (1 << CS11 )) ;
 3e0:	8e b5       	in	r24, 0x2e	; 46
 3e2:	83 60       	ori	r24, 0x03	; 3
 3e4:	8e bd       	out	0x2e, r24	; 46
 3e6:	08 95       	ret

000003e8 <main>:
void wait(int);
void init_timer(void);

int main (void)
{
	TotalInit();
 3e8:	60 df       	rcall	.-320    	; 0x2aa <TotalInit>
	clearDisplay();
 3ea:	c2 de       	rcall	.-636    	; 0x170 <clearDisplay>

    // Init LCD
    //init_4bits_mode();


    board_init();
 3ec:	66 df       	rcall	.-308    	; 0x2ba <board_init>
    
    

    DDRD = 0xFF;            // open all ports
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	81 bb       	out	0x11, r24	; 17
    DDRA = 0xFF;
 3f2:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xFF;
 3f4:	87 bb       	out	0x17, r24	; 23
    DDRC = 0xFF;
 3f6:	84 bb       	out	0x14, r24	; 20
    DDRG = 0x00;
 3f8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

    
    init_timer();
 3fc:	e8 df       	rcall	.-48     	; 0x3ce <init_timer>

    int re1 = 0, re2 = 0;
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	e1 2c       	mov	r14, r1
 404:	f1 2c       	mov	r15, r1

    while(1)
    {
		CalculateScore(score);
		writeCustomDisplay();
      if(!(PING & (1 << PG4)))
 406:	0f 2e       	mov	r0, r31
 408:	f3 e6       	ldi	r31, 0x63	; 99
 40a:	cf 2e       	mov	r12, r31
 40c:	d1 2c       	mov	r13, r1
 40e:	f0 2d       	mov	r31, r0
            player[2]=player[3];
            player[3]=dummy;
            wait(200);
        }
      }else {
        re1 = 0;
 410:	81 2c       	mov	r8, r1
 412:	91 2c       	mov	r9, r1
      if(!(PING & (1 << PG4)))
     {
        if(re1 == 0) {
            re1 = 1;
            char dummy;
            dummy = player[0];
 414:	c4 e0       	ldi	r28, 0x04	; 4
 416:	d1 e0       	ldi	r29, 0x01	; 1
		CalculateScore(score);
		writeCustomDisplay();
      if(!(PING & (1 << PG4)))
     {
        if(re1 == 0) {
            re1 = 1;
 418:	aa 24       	eor	r10, r10
 41a:	a3 94       	inc	r10
 41c:	b1 2c       	mov	r11, r1

    int re1 = 0, re2 = 0;

    while(1)
    {
		CalculateScore(score);
 41e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <score>
 422:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <score+0x1>
 426:	b6 de       	rcall	.-660    	; 0x194 <CalculateScore>
		writeCustomDisplay();
 428:	23 df       	rcall	.-442    	; 0x270 <writeCustomDisplay>
      if(!(PING & (1 << PG4)))
 42a:	f6 01       	movw	r30, r12
 42c:	20 81       	ld	r18, Z
 42e:	24 fd       	sbrc	r18, 4
 430:	11 c0       	rjmp	.+34     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     {
        if(re1 == 0) {
 432:	e1 14       	cp	r14, r1
 434:	f1 04       	cpc	r15, r1
 436:	81 f4       	brne	.+32     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
            re1 = 1;
            char dummy;
            dummy = player[0];
 438:	88 81       	ld	r24, Y
            player[0] = player[1];
 43a:	99 81       	ldd	r25, Y+1	; 0x01
 43c:	98 83       	st	Y, r25
            player[1]=player[2];
 43e:	9a 81       	ldd	r25, Y+2	; 0x02
 440:	99 83       	std	Y+1, r25	; 0x01
            player[2]=player[3];
 442:	9b 81       	ldd	r25, Y+3	; 0x03
 444:	9a 83       	std	Y+2, r25	; 0x02
            player[3]=dummy;
 446:	8b 83       	std	Y+3, r24	; 0x03
            wait(200);
 448:	88 ec       	ldi	r24, 0xC8	; 200
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	3d de       	rcall	.-902    	; 0xc8 <wait>
		CalculateScore(score);
		writeCustomDisplay();
      if(!(PING & (1 << PG4)))
     {
        if(re1 == 0) {
            re1 = 1;
 44e:	ea 2c       	mov	r14, r10
 450:	fb 2c       	mov	r15, r11
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
            player[2]=player[3];
            player[3]=dummy;
            wait(200);
        }
      }else {
        re1 = 0;
 454:	e8 2c       	mov	r14, r8
 456:	f9 2c       	mov	r15, r9
     }

     if(!(PING & (1 << PG2)))
 458:	f6 01       	movw	r30, r12
 45a:	20 81       	ld	r18, Z
 45c:	22 fd       	sbrc	r18, 2
 45e:	11 c0       	rjmp	.+34     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     {
        if(re2 == 0) {
 460:	01 15       	cp	r16, r1
 462:	11 05       	cpc	r17, r1
 464:	81 f4       	brne	.+32     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
            re2 = 1;
            char dummy;
            dummy = player[3];
 466:	8b 81       	ldd	r24, Y+3	; 0x03
            player[3] = player[2];
 468:	9a 81       	ldd	r25, Y+2	; 0x02
 46a:	9b 83       	std	Y+3, r25	; 0x03
            player[2]=player[1];
 46c:	99 81       	ldd	r25, Y+1	; 0x01
 46e:	9a 83       	std	Y+2, r25	; 0x02
            player[1]=player[0];
 470:	98 81       	ld	r25, Y
 472:	99 83       	std	Y+1, r25	; 0x01
            player[0]=dummy;
 474:	88 83       	st	Y, r24
            wait(200);
 476:	88 ec       	ldi	r24, 0xC8	; 200
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	26 de       	rcall	.-948    	; 0xc8 <wait>
     }

     if(!(PING & (1 << PG2)))
     {
        if(re2 == 0) {
            re2 = 1;
 47c:	0a 2d       	mov	r16, r10
 47e:	1b 2d       	mov	r17, r11
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
            player[1]=player[0];
            player[0]=dummy;
            wait(200);
        }
     } else {
        re2 = 0;
 482:	08 2d       	mov	r16, r8
 484:	19 2d       	mov	r17, r9
     }
     wait(1);
 486:	8a 2d       	mov	r24, r10
 488:	9b 2d       	mov	r25, r11
 48a:	1e de       	rcall	.-964    	; 0xc8 <wait>
    }
 48c:	c8 cf       	rjmp	.-112    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

0000048e <__divmodhi4>:
 48e:	97 fb       	bst	r25, 7
 490:	07 2e       	mov	r0, r23
 492:	16 f4       	brtc	.+4      	; 0x498 <__divmodhi4+0xa>
 494:	00 94       	com	r0
 496:	06 d0       	rcall	.+12     	; 0x4a4 <__divmodhi4_neg1>
 498:	77 fd       	sbrc	r23, 7
 49a:	08 d0       	rcall	.+16     	; 0x4ac <__divmodhi4_neg2>
 49c:	0b d0       	rcall	.+22     	; 0x4b4 <__udivmodhi4>
 49e:	07 fc       	sbrc	r0, 7
 4a0:	05 d0       	rcall	.+10     	; 0x4ac <__divmodhi4_neg2>
 4a2:	3e f4       	brtc	.+14     	; 0x4b2 <__divmodhi4_exit>

000004a4 <__divmodhi4_neg1>:
 4a4:	90 95       	com	r25
 4a6:	81 95       	neg	r24
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	08 95       	ret

000004ac <__divmodhi4_neg2>:
 4ac:	70 95       	com	r23
 4ae:	61 95       	neg	r22
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255

000004b2 <__divmodhi4_exit>:
 4b2:	08 95       	ret

000004b4 <__udivmodhi4>:
 4b4:	aa 1b       	sub	r26, r26
 4b6:	bb 1b       	sub	r27, r27
 4b8:	51 e1       	ldi	r21, 0x11	; 17
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__udivmodhi4_ep>

000004bc <__udivmodhi4_loop>:
 4bc:	aa 1f       	adc	r26, r26
 4be:	bb 1f       	adc	r27, r27
 4c0:	a6 17       	cp	r26, r22
 4c2:	b7 07       	cpc	r27, r23
 4c4:	10 f0       	brcs	.+4      	; 0x4ca <__udivmodhi4_ep>
 4c6:	a6 1b       	sub	r26, r22
 4c8:	b7 0b       	sbc	r27, r23

000004ca <__udivmodhi4_ep>:
 4ca:	88 1f       	adc	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	5a 95       	dec	r21
 4d0:	a9 f7       	brne	.-22     	; 0x4bc <__udivmodhi4_loop>
 4d2:	80 95       	com	r24
 4d4:	90 95       	com	r25
 4d6:	bc 01       	movw	r22, r24
 4d8:	cd 01       	movw	r24, r26
 4da:	08 95       	ret

000004dc <do_rand>:
 4dc:	8f 92       	push	r8
 4de:	9f 92       	push	r9
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ec 01       	movw	r28, r24
 4f2:	68 81       	ld	r22, Y
 4f4:	79 81       	ldd	r23, Y+1	; 0x01
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	9b 81       	ldd	r25, Y+3	; 0x03
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	81 05       	cpc	r24, r1
 500:	91 05       	cpc	r25, r1
 502:	21 f4       	brne	.+8      	; 0x50c <do_rand+0x30>
 504:	64 e2       	ldi	r22, 0x24	; 36
 506:	79 ed       	ldi	r23, 0xD9	; 217
 508:	8b e5       	ldi	r24, 0x5B	; 91
 50a:	97 e0       	ldi	r25, 0x07	; 7
 50c:	2d e1       	ldi	r18, 0x1D	; 29
 50e:	33 ef       	ldi	r19, 0xF3	; 243
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	38 d0       	rcall	.+112    	; 0x586 <__divmodsi4>
 516:	49 01       	movw	r8, r18
 518:	5a 01       	movw	r10, r20
 51a:	9b 01       	movw	r18, r22
 51c:	ac 01       	movw	r20, r24
 51e:	a7 ea       	ldi	r26, 0xA7	; 167
 520:	b1 e4       	ldi	r27, 0x41	; 65
 522:	4d d0       	rcall	.+154    	; 0x5be <__muluhisi3>
 524:	6b 01       	movw	r12, r22
 526:	7c 01       	movw	r14, r24
 528:	ac ee       	ldi	r26, 0xEC	; 236
 52a:	b4 ef       	ldi	r27, 0xF4	; 244
 52c:	a5 01       	movw	r20, r10
 52e:	94 01       	movw	r18, r8
 530:	52 d0       	rcall	.+164    	; 0x5d6 <__mulohisi3>
 532:	dc 01       	movw	r26, r24
 534:	cb 01       	movw	r24, r22
 536:	8c 0d       	add	r24, r12
 538:	9d 1d       	adc	r25, r13
 53a:	ae 1d       	adc	r26, r14
 53c:	bf 1d       	adc	r27, r15
 53e:	b7 ff       	sbrs	r27, 7
 540:	03 c0       	rjmp	.+6      	; 0x548 <do_rand+0x6c>
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	a1 09       	sbc	r26, r1
 546:	b0 48       	sbci	r27, 0x80	; 128
 548:	88 83       	st	Y, r24
 54a:	99 83       	std	Y+1, r25	; 0x01
 54c:	aa 83       	std	Y+2, r26	; 0x02
 54e:	bb 83       	std	Y+3, r27	; 0x03
 550:	9f 77       	andi	r25, 0x7F	; 127
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	bf 90       	pop	r11
 560:	af 90       	pop	r10
 562:	9f 90       	pop	r9
 564:	8f 90       	pop	r8
 566:	08 95       	ret

00000568 <rand_r>:
 568:	b9 cf       	rjmp	.-142    	; 0x4dc <do_rand>

0000056a <rand>:
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	b6 cf       	rjmp	.-148    	; 0x4dc <do_rand>

00000570 <srand>:
 570:	a0 e0       	ldi	r26, 0x00	; 0
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 578:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 57c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 580:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 584:	08 95       	ret

00000586 <__divmodsi4>:
 586:	05 2e       	mov	r0, r21
 588:	97 fb       	bst	r25, 7
 58a:	16 f4       	brtc	.+4      	; 0x590 <__divmodsi4+0xa>
 58c:	00 94       	com	r0
 58e:	0f d0       	rcall	.+30     	; 0x5ae <__negsi2>
 590:	57 fd       	sbrc	r21, 7
 592:	05 d0       	rcall	.+10     	; 0x59e <__divmodsi4_neg2>
 594:	24 d0       	rcall	.+72     	; 0x5de <__udivmodsi4>
 596:	07 fc       	sbrc	r0, 7
 598:	02 d0       	rcall	.+4      	; 0x59e <__divmodsi4_neg2>
 59a:	46 f4       	brtc	.+16     	; 0x5ac <__divmodsi4_exit>
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__negsi2>

0000059e <__divmodsi4_neg2>:
 59e:	50 95       	com	r21
 5a0:	40 95       	com	r20
 5a2:	30 95       	com	r19
 5a4:	21 95       	neg	r18
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	4f 4f       	sbci	r20, 0xFF	; 255
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255

000005ac <__divmodsi4_exit>:
 5ac:	08 95       	ret

000005ae <__negsi2>:
 5ae:	90 95       	com	r25
 5b0:	80 95       	com	r24
 5b2:	70 95       	com	r23
 5b4:	61 95       	neg	r22
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <__muluhisi3>:
 5be:	31 d0       	rcall	.+98     	; 0x622 <__umulhisi3>
 5c0:	a5 9f       	mul	r26, r21
 5c2:	90 0d       	add	r25, r0
 5c4:	b4 9f       	mul	r27, r20
 5c6:	90 0d       	add	r25, r0
 5c8:	a4 9f       	mul	r26, r20
 5ca:	80 0d       	add	r24, r0
 5cc:	91 1d       	adc	r25, r1
 5ce:	11 24       	eor	r1, r1
 5d0:	08 95       	ret

000005d2 <__mulshisi3>:
 5d2:	b7 ff       	sbrs	r27, 7
 5d4:	f4 cf       	rjmp	.-24     	; 0x5be <__muluhisi3>

000005d6 <__mulohisi3>:
 5d6:	f3 df       	rcall	.-26     	; 0x5be <__muluhisi3>
 5d8:	82 1b       	sub	r24, r18
 5da:	93 0b       	sbc	r25, r19
 5dc:	08 95       	ret

000005de <__udivmodsi4>:
 5de:	a1 e2       	ldi	r26, 0x21	; 33
 5e0:	1a 2e       	mov	r1, r26
 5e2:	aa 1b       	sub	r26, r26
 5e4:	bb 1b       	sub	r27, r27
 5e6:	fd 01       	movw	r30, r26
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <__udivmodsi4_ep>

000005ea <__udivmodsi4_loop>:
 5ea:	aa 1f       	adc	r26, r26
 5ec:	bb 1f       	adc	r27, r27
 5ee:	ee 1f       	adc	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	a2 17       	cp	r26, r18
 5f4:	b3 07       	cpc	r27, r19
 5f6:	e4 07       	cpc	r30, r20
 5f8:	f5 07       	cpc	r31, r21
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__udivmodsi4_ep>
 5fc:	a2 1b       	sub	r26, r18
 5fe:	b3 0b       	sbc	r27, r19
 600:	e4 0b       	sbc	r30, r20
 602:	f5 0b       	sbc	r31, r21

00000604 <__udivmodsi4_ep>:
 604:	66 1f       	adc	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	1a 94       	dec	r1
 60e:	69 f7       	brne	.-38     	; 0x5ea <__udivmodsi4_loop>
 610:	60 95       	com	r22
 612:	70 95       	com	r23
 614:	80 95       	com	r24
 616:	90 95       	com	r25
 618:	9b 01       	movw	r18, r22
 61a:	ac 01       	movw	r20, r24
 61c:	bd 01       	movw	r22, r26
 61e:	cf 01       	movw	r24, r30
 620:	08 95       	ret

00000622 <__umulhisi3>:
 622:	a2 9f       	mul	r26, r18
 624:	b0 01       	movw	r22, r0
 626:	b3 9f       	mul	r27, r19
 628:	c0 01       	movw	r24, r0
 62a:	a3 9f       	mul	r26, r19
 62c:	70 0d       	add	r23, r0
 62e:	81 1d       	adc	r24, r1
 630:	11 24       	eor	r1, r1
 632:	91 1d       	adc	r25, r1
 634:	b2 9f       	mul	r27, r18
 636:	70 0d       	add	r23, r0
 638:	81 1d       	adc	r24, r1
 63a:	11 24       	eor	r1, r1
 63c:	91 1d       	adc	r25, r1
 63e:	08 95       	ret

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
